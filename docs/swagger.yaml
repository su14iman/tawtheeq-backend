basePath: /api
definitions:
  fiber.Map:
    additionalProperties: true
    type: object
  models.AddTeamMemberInput:
    properties:
      team_id:
        type: string
      user_id:
        type: string
    type: object
  models.AddTeamMemberToMyInput:
    properties:
      user_id:
        type: string
    type: object
  models.ChangeTeamNameInput:
    properties:
      name:
        type: string
    type: object
  models.ChangeUserRoleInput:
    properties:
      role:
        example: team_leader
        type: string
    type: object
  models.CreateTeamInput:
    properties:
      leader_id:
        type: string
      name:
        type: string
    type: object
  models.CreateUserInput:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
    type: object
  models.DocumentResponse:
    properties:
      created_at:
        type: string
      file_format:
        type: string
      hash:
        type: string
      id:
        type: string
      original_name:
        type: string
      signed_by_team:
        $ref: '#/definitions/models.TeamShortResponse'
      signed_by_user:
        $ref: '#/definitions/models.UserShortResponse'
      updated_at:
        type: string
      verification_count:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      created_at:
        type: string
      error:
        type: string
    type: object
  models.ForgotPasswordInput:
    properties:
      email:
        example: user@example.com
        type: string
    type: object
  models.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user:
        properties:
          email:
            type: string
          id:
            type: string
          name:
            type: string
          role:
            type: string
        type: object
    type: object
  models.ResetPasswordInput:
    properties:
      new_password:
        example: MyNewPassword123
        type: string
      token:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  models.Role:
    enum:
    - super_admin
    - team_leader
    - team_member
    type: string
    x-enum-varnames:
    - SuperAdminRole
    - TeamLeaderRole
    - TeamMemberRole
  models.Team:
    properties:
      createdAt:
        type: string
      id:
        type: string
      leader:
        $ref: '#/definitions/models.User'
      leaderID:
        type: string
      members:
        items:
          $ref: '#/definitions/models.TeamMember'
        type: array
      name:
        type: string
    type: object
  models.TeamMember:
    properties:
      createdAt:
        type: string
      id:
        type: string
      team:
        $ref: '#/definitions/models.Team'
      teamID:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: string
    type: object
  models.TeamShortResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.UploadResponse:
    properties:
      file_path:
        type: string
      hash:
        type: string
      signature:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      role:
        $ref: '#/definitions/models.Role'
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      role:
        $ref: '#/definitions/models.Role'
    type: object
  models.UserShortResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
    type: object
host: localhost:4000
info:
  contact: {}
  description: RESTful API for signing and verifying files with digital signatures
  title: Tawtheeq API
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Sends a reset password link to the user's email if it exists
      parameters:
      - description: User email
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Send password reset email
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user and return JWT token
      parameters:
      - description: Login Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Login
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Resets the user's password if the token is valid
      parameters:
      - description: Token and new password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Reset password using token
      tags:
      - auth
  /documents/{id}/hide:
    get:
      consumes:
      - application/json
      description: Hide document
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Hide document
      tags:
      - documents
  /documents/{id}/show:
    get:
      consumes:
      - application/json
      description: Show document
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Show document
      tags:
      - documents
  /documents/hidden:
    get:
      consumes:
      - application/json
      description: Get all documents hidden
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all documents hidden
      tags:
      - documents
  /documents/me/hidden:
    get:
      consumes:
      - application/json
      description: Get all documents from me hidden
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all documents from me hidden
      tags:
      - documents
  /documents/my/{id}/hide:
    get:
      consumes:
      - application/json
      description: Hide document
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Hide document
      tags:
      - documents
  /documents/myteam:
    get:
      consumes:
      - application/json
      description: Get all documents from my team
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all documents from my team
      tags:
      - documents
  /documents/myteam/{id}/hide:
    get:
      consumes:
      - application/json
      description: Hide document
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Hide document
      tags:
      - documents
  /documents/team/{team_id}/hidden:
    get:
      consumes:
      - application/json
      description: Get all documents from team hidden
      parameters:
      - description: Team ID
        in: path
        name: team_id
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all documents from team hidden
      tags:
      - documents
  /documents/team/{team_id}/visible:
    get:
      consumes:
      - application/json
      description: Get all documents from team visible
      parameters:
      - description: Team ID
        in: path
        name: team_id
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all documents from team visible
      tags:
      - documents
  /documents/user/{user_id}/hidden:
    get:
      consumes:
      - application/json
      description: Get all documents from user hidden
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all documents from user hidden
      tags:
      - documents
  /documents/user/{user_id}/visible:
    get:
      consumes:
      - application/json
      description: Get all documents from user visible
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all documents from user visible
      tags:
      - documents
  /documents/user/me:
    get:
      consumes:
      - application/json
      description: Get all documents from me visible
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all documents from me visible
      tags:
      - documents
  /documents/visible:
    get:
      consumes:
      - application/json
      description: Get all documents visible
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all documents visible
      tags:
      - documents
  /my/team:
    get:
      consumes:
      - application/json
      description: Get the team of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Team'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get my team
      tags:
      - teams
  /my/team/members:
    get:
      consumes:
      - application/json
      description: Get all users in the authenticated user's team
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserShortResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all users in my team
      tags:
      - teams
    post:
      consumes:
      - application/json
      description: Add a user to the authenticated user's team
      parameters:
      - description: Add Team Member Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.AddTeamMemberToMyInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TeamMember'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Add user to my team
      tags:
      - teams
  /my/team/members/{user_id}:
    delete:
      consumes:
      - application/json
      description: Remove a user from the authenticated user's team
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TeamMember'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Remove user from my team
      tags:
      - teams
  /myself/name:
    put:
      consumes:
      - application/json
      description: Allows user to change their own name
      parameters:
      - description: New full name
        in: query
        name: full_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      - JWT: []
      - ApiKeyAuth: []
      summary: Change user name
      tags:
      - myself
  /myself/password:
    put:
      consumes:
      - application/json
      description: Allows user to change their own password
      parameters:
      - description: Old password
        in: query
        name: old_password
        required: true
        type: string
      - description: New password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      - JWT: []
      - ApiKeyAuth: []
      summary: Change user password
      tags:
      - myself
  /teams:
    get:
      consumes:
      - application/json
      description: Get all teams with pagination
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Team'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all teams
      tags:
      - teams
    post:
      consumes:
      - application/json
      description: Create a new team
      parameters:
      - description: Create Team Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreateTeamInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Team'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create team
      tags:
      - teams
  /teams/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a team by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Team'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Remove team
      tags:
      - teams
  /teams/{id}/leader:
    put:
      consumes:
      - application/json
      description: Update the leader of a team by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      - description: New leader ID
        in: formData
        name: leader_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Team'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update team leader
      tags:
      - teams
  /teams/{id}/name:
    put:
      consumes:
      - application/json
      description: Update the name of a team by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      - description: New team name
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ChangeTeamNameInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Team'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update team name
      tags:
      - teams
  /teams/{team_id}/users:
    get:
      consumes:
      - application/json
      description: Get all users in a team with pagination
      parameters:
      - description: Team ID
        in: path
        name: team_id
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserShortResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all users in a team
      tags:
      - teams
  /teams/members:
    post:
      consumes:
      - application/json
      description: Add a user to a team
      parameters:
      - description: Add Team Member Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.AddTeamMemberInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TeamMember'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Add user to team
      tags:
      - teams
  /teams/members/{team_id}/{user_id}:
    delete:
      consumes:
      - application/json
      description: Remove a user from a team
      parameters:
      - description: Team ID
        in: path
        name: team_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TeamMember'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Remove user from team
      tags:
      - teams
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload file
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Upload file
      tags:
      - documents
  /users:
    get:
      consumes:
      - application/json
      description: Get all users with pagination
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserShortResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      - JWT: []
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Create User Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Remove user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserShortResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Remove user
      tags:
      - users
  /users/{id}/role:
    put:
      consumes:
      - application/json
      description: Allows Super Admin to change a user's role
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: New role
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ChangeUserRoleInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Change user role
      tags:
      - users
  /verify/{id}:
    get:
      consumes:
      - application/json
      description: Verify file by ID
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Verify file by ID
      tags:
      - documents
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
